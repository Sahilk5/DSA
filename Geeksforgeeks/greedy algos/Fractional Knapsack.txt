https://practice.geeksforgeeks.org/problems/fractional-knapsack-1587115620/1/?track=SPC-Greedy&batchId=154

Solution -

// { Driver Code Starts

#include <bits/stdc++.h>
using namespace std;

struct Item{
    int value;
    int weight;
};


 // } Driver Code Ends



//class implemented
/*
struct Item{
    int value;
    int weight;
};
*/

// function to return fractionalweights

bool comp(Item i1, Item i2){
    if(i1.weight == 0 || i2.weight == 0){
        return false;
    }
    double w1 = double((i1.value))/double((i1.weight));
    double w2 = double((i2.value))/double((i2.weight));
    return (w1 > w2);
}

double fractionalKnapsack(int W, Item arr[], int n)
{
    // Your code here
    double ans = 0;

    sort(arr, arr+n, comp);
    int i = 0;
    while(i < n){
        if(W >= arr[i].weight){
            ans += arr[i].value;
            W = W - arr[i].weight;
        }else{
            ans +=  W*double((arr[i].value))/double((arr[i].weight));
            return ans;
        }
        i++;
    }
    return ans;
}

// { Driver Code Starts.
int main()
{
	int t;
	cin>>t;
	cout<<setprecision(2)<<fixed;
	while(t--){
		int n, W;
		cin>>n>>W;
		
		Item arr[n];
		for(int i=0;i<n;i++){
			cin>>arr[i].value>>arr[i].weight;
		}
		cout<<fractionalKnapsack(W, arr, n)<<endl;
	}
    return 0;
}  // } Driver Code Ends