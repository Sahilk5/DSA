Given an array arr[] of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.

Input:
The first line of input contains T, number of test cases. First line of line each test case contains a single integer N.
Next line contains N integer array.

Output:
Print the output of each test case in a seprate line.

Your Task:
This is a function problem. You only need to complete the function findLongestConseqSubseq that takes arr and n as parameters and retuns the length.

Constraints:
1 <= T <= 100
1 <= N <= 105
0 <= a[i] <= 105

Example:
Input:
2
7
2 6 1 9 4 5 3
7
1 9 3 10 4 20 2
Output:
6
4

Explanation:
Testcase 1:  The consecutive numbers here are 1, 2, 3, 4, 5, 6. These 6 numbers form the longest consecutive subsquence.
Testcase2: 1, 2, 3, 4 is the longest consecutive subsequence.

Solution - 
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

int findLongestConseqSubseq(int arr[], int n);
 
// Driver program
int main()
{
 int  t,n,i,a[100001];
 cin>>t;
 while(t--)
 {
  cin>>n;
  for(i=0;i<n;i++)
  cin>>a[i];
  cout<<findLongestConseqSubseq(a, n)<<endl;
 }
      
    return 0;
}// } Driver Code Ends


int findLongestConseqSubseq(int arr[], int n)
{
  //Your code here
  unordered_set<int> s;
  for(int i = 0; i < n; i++){
      s.insert(arr[i]);
  }
  int count = 0;
  int m_count = 1;
  for(int i = 0;i < n; i++){
      count = 1;
      if(s.find(arr[i]-1) == s.end()){
          while(s.find(arr[i]+count) != s.end()){
              count++;
          }
      }
      if(count > m_count){
          m_count = count;
      }
  }
  return m_count;
}