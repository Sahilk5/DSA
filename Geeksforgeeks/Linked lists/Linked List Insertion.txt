Given a key (or data) to be inserted into the linked list of size N. The task is to insert the element at head or tail of the linked list depending on the input just before it p. If p is 0, then insert the element at the beginning else insert at the end.
Hint: When inserting at the end, make sure that you handle NULL explicitly.

Input:
The first line of input contains the number of test cases T. For each test case, the first line of input contains the length of linked list N and the next line contains 2*N integers, each element to be inserted into the list is preceded by a 0 or 1 which decide the place to be inserted.

Output:
For each test case, there will be a single line of output that contains the linked list elements.

Your Task:
This is a function problem. You only need to complete the functions insertAtBeginning and inserted that returns head after successful insertion. The printing is done automatically by the driver code.

Constraints:
1 <= T <= 100
1 <= N <= 104

Example:
Input:
3
5
9 0 5 1 6 1 2 0 5 0
3
5 1 6 1 9 1
4
15 0 36 0 95 0 14 0
Output:
5 2 9 5 6
5 6 9
14 95 36 15

Explanation:
Testcase 1: After inserting the elements at the required position, we have linked list as 5, 2, 9, 5, 6.
Testcase 2: After inserting the elements based on the value of p, we have linked the list as 5,6,9.
Testcase 3: After inserting the elements based on the value of p, we have linked the list as  14,95,36,15.

Solution - 

// { Driver Code Starts
#include <iostream>
using namespace std;

/*Struct of linked list*/
struct Node {
  int data;
  struct Node *next;
  Node(int x) { //the constructor
    data = x;
    next = NULL;
  }
};

void printList(Node *head) { //function to print list
    Node *node = head;
    while (node != NULL) {
      cout << node -> data << ' ';
      node = node -> next;
    }
    cout << endl;
}

Node *insertAtBegining(Node *head, int newData);
Node *insertAtEnd(Node *head, int newData);


int main() {
  int test;
  cin >> test; //number of testcases input
  while (test--) { //while we have testcases we run the loop
    int n, ch, tmp;
    Node *head = NULL; //initially head is null as linked list is empty
    cin >> n;
    for (int i = 0; i < n; i++) {
      cin >> tmp >> ch; 
      if (ch) head = insertAtEnd(head, tmp); 
      else head = insertAtBegining(head, tmp);
    }
    printList(head);
  }
  return 0;
}

// } Driver Code Ends


/*Structure of the linked list node is as
struct Node {
  int data;
  struct Node * next;
  Node(int x) {
    data = x;
    next = NULL;
  }
}; */

// function inserts the data in front of the list

Node *tail = NULL;

Node *insertAtBegining(Node *head, int newData) {
   // Your code here
   Node *temp = new Node(newData);
   if(head == NULL){
       head = temp;
       tail = temp;
       return head;
   }
   
   temp->next = head;
   head = temp;
   return head;
}


// function appends the data at the end of the list
Node *insertAtEnd(Node *head, int newData)  {
   // Your code here
   Node *temp = new Node(newData);
   if(head == NULL){
       head = temp;
       tail = temp;
       return head;
   }
   
   tail->next = temp;
   tail = temp;
   return head;
}
