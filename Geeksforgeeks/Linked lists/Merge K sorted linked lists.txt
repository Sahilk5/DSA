https://practice.geeksforgeeks.org/problems/merge-k-sorted-linked-lists/1/?track=PC-W5-LL&batchId=154

Solution -

Node* merge(Node* head1, Node* head2)
{ 
  if(head1 == NULL)return head2;
  if(head2 == NULL)return head1;
  Node *result = NULL;
  if(head1->data < head2->data){
      result = head1;
      result->next = merge(head1->next, head2);
  }else{
      result = head2;
      result->next = merge(head1, head2->next);
  }
  return result;
}

//Why is slow=head & fast = head initialization giving seg fault here
Node *split(Node *head)
{
    Node *slow = head;
    Node *fast = head->next;
    while(fast && fast->next){
        slow = slow->next;
        fast = fast->next->next;
    }
    Node *temp = slow->next;
    slow->next = NULL;
    return temp;
}


// Function to merge two DLLs
struct Node *mergeSort(struct Node *head)
{
	// Your code here
	if(head == NULL || head->next == NULL)
        return head;
    Node* head2 = split(head);
    head = mergeSort(head);
    head2 = mergeSort(head2);
    return merge(head, head2);
}
Node * mergeKLists(Node *arr[], int N)
{
       Node * head = NULL;
       for(int i = 0; i < N; i++){
           if(arr[i])
           head = merge(head, arr[i]);
       }
       return head;
}