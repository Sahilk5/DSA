https://practice.geeksforgeeks.org/problems/subset-sum-problem/0/?track=SPC-DP&batchId=154

Solution -

#include<iostream>
using namespace std;

void subsetSum(int arr[], int n, int sum){
    
    bool dp[n+1][sum+1];
    for(int i = 0; i <= n; i++){
        dp[i][0] = 1;
    }
    for(int i = 0; i <= (sum); i++){
        dp[0][i] = 0;
    }
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= (sum); j++){
            if(j < arr[i-1]){
                dp[i][j] = dp[i-1][j];
            }
            else{
                dp[i][j] = dp[i-1][j] || dp[i-1][j-arr[i-1]];
            }
        }
    }
//    cout<<dp[n][sum];
    if(dp[n][sum] != 0){
        cout<<"YES";return;
    }else{
        cout<<"NO";
    }
}

int main()
 {
	//code
	int t;
	cin>>t;
	while(t--){
	    int n;
	    cin>>n;
	    int arr[n];
	    int sum = 0;
	    for(int i = 0; i < n; i++){
	        cin>>arr[i];
	        sum+=arr[i];
	    }
	    if(sum%2 != 0){
	        cout<<"NO"<<endl;continue;
	    }
	    subsetSum(arr, n, sum/2);
	    cout<<endl;
	}
	return 0;
}