https://practice.geeksforgeeks.org/problems/most-occurring-elements-1587115620/1/?track=SPC-Heap&batchId=154

Solution -


struct compare 
{ 
    bool operator()(pair<int, int> p1, pair<int, int> p2) 
    { 
        // if frequencies of two elements are same 
        // then the larger number should come first 
        if (p1.second == p2.second) 
            return p1.first < p2.first; 
              
        // insert elements in the priority queue on the basis of 
        // decreasing order of frequencies     
        return p1.second < p2.second;     
    } 
}; 
  
int print_N_mostFrequentNumber(int arr[], int n, int k) 
{ 
	// Your code here	 
	unordered_map<int, int> um; 
    for (int i = 0; i<n; i++) 
        um[arr[i]]++; 
      
    vector<pair<int, int> > freq_arr(um.begin(), um.end()); 
    
    priority_queue<pair<int, int>, vector<pair<int, int> >,  
                           compare> pq(um.begin(), um.end()); 
    int res = 0;
    for (int i = 1; i<= k; i++) 
    { 
        res+= pq.top().second; 
        pq.pop(); 
    }    
    
    return res;
} 