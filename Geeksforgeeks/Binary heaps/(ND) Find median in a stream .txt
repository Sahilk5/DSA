https://practice.geeksforgeeks.org/problems/find-median-in-a-stream-1587115620/1/?track=SPC-Heap&batchId=154

Solution -

// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

class FindMedian
{
	public:
		void insertHeap(int &);
		double getMedian();
	private:
		double median; //Stores current median
		priority_queue<int> max; //Max heap for lower values
		priority_queue<int, vector<int>, greater<int> > min; //Min heap for greater values
		void balanceHeaps(); //Method used by insertHeap
};


 // } Driver Code Ends


// Function to insert heap
void FindMedian::insertHeap(int &x)
{
	// Your code here
	int sSize = max.size();
	int lSize = min.size();
	if(max.empty()){
	    max.push(x);
	}
	else if(x > max.top()){
	    min.push(x);
	}
	else if(min.empty()){
	   min.push(max.top());
	   max.pop();
	   max.push(x);
	}
	else{
	   max.push(x);
	}
	
	balanceHeaps();
}

// Function to balance heaps
void FindMedian::balanceHeaps()
{
	// Your code here
	if(abs(max.size()-min.size()) > 1){
	    if(max.size() > min.size()){
	        min.push(max.top());max.pop();
	    }
	    else{
	        max.push(min.top());min.pop();
	    }
	}
}

// Function to return getMedian
double FindMedian::getMedian()
{
	// Your code here
	int sSize = max.size();
	int lSize = min.size();
	if(sSize > lSize){
	    return max.top();
	}
	else{
	    return (max.top()+min.top())/2;
	}
}


// { Driver Code Starts.

int main()
{
    int n, x;
	FindMedian Ans;
	cin >> n;
	for(int i = 1;i<= n; ++i)
	{
		cin >> x;
		Ans.insertHeap(x);
	    cout << floor(Ans.getMedian()) << endl;
	}
	// }
	return 0;
}  // } Driver Code Ends