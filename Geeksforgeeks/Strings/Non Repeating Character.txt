Given a string S consisting of lowercase Latin Letters. Find the first non-repeating character in S.

Input:
The first line contains T denoting the number of testcases. Then follows description of testcases.
Each testcase contains the string S.

Output:
For each testcase, print the first non repeating character present in string. Print -1 if there is no non repeating character.

Your Task:
This is a function problem. You only need to complete the function nonrepeatingCharacter() that takes string S as parameter and returns the character. If there is no non repeating character then return '$' .
The driver code automatically appends a new line after function call.

Constraints:
1 <= T <= 100
1 <= N <= 103

Example:
Input :
3
hello
zxvczbtxyzvy
xxyyzz
Output :
h
c
-1

Explanation:
Testcase 1: In the given string, first character which is non-repeating is h, as it appars first and there is no other 'h' in the string.
Testcase 2: In the given string, 'c' is the character which is non-repeating. 
Testcase 3: In the given string no character is there which is non-repeating.Hence, the output is -1.

Solution - 
 // { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

char nonrepeatingCharacter(string S);

int main() {
	
	int T;
	cin >> T;
	
	while(T--)
	{
	
	    string S;
	    cin >> S;
	    
        char ans = nonrepeatingCharacter(S);
        
        if(ans != '$')
	    cout << ans;
        else cout << "-1";
            
        cout << endl;
	    
	}
	
	return 0;
}
// } Driver Code Ends


// Complete this function
char nonrepeatingCharacter(string S)
{
    int count[26];
    memset(count, -1, sizeof(count));
    char c = '$';
    for(int i = 0; i < S.size(); i++){
        if(count[S[i] - 'a'] == -1){
            count[S[i] - 'a'] = i;
        }
        else{
            count[S[i] - 'a'] = -2;
        }
    }
    int min_i = 9999999;
    for(int i = 0; i < 26; i++){
        if(count[i] >= 0){
            min_i = min(min_i, count[i]);
            c = S[min_i];
        }
    }
    return c;
}
