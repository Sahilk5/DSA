Given a positive integer num, output its complement number. The complement strategy is to flip the bits of its binary representation.

 

Example 1:

Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.
Example 2:

Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.
 

Constraints:

The given integer num is guaranteed to fit within the range of a 32-bit signed integer.
num >= 1
You could assume no leading zero bit in the integerâ€™s binary representation.
This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/

Solution 1- 

class Solution:
    def findComplement(self, N: int) -> int:
        b = bin(N)
        
        n = 1
        comp = 0
        for i in b[::-1]:
            if i == "b":
                return comp
            elif i == '0':
                comp+=n
            n*=2



Solution 2-

class Solution:
    def findComplement(self, N: int) -> int:
        n_bits = floor(log2(N)) + 1
        all_ones = (1<<(n_bits)) - 1
        return (N ^ all_ones)