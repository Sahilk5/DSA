Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False
 

Note:

The input strings only contain lower case letters.
The length of both given strings is in range [1, 10,000].

Solution -

def compare(arr1, arr2):
    for i in range(26):
        if arr1[i] != arr2[i]:
            return False
    return True

class Solution:
    def checkInclusion(self, p: str, s: str) -> bool:
        m = len(p)
        n = len(s)
        
        if n<m:
            return False
        
        countP = [0]*26
        countT = [0]*26
        
        for i in range(m):
            countP[ord(p[i]) - ord('a')] += 1
            countT[ord(s[i]) - ord('a')] += 1
        ans = list()
        for i in range(m,n):
            if(compare(countP, countT)):
                return True
            
            countT[ord(s[i]) - ord('a')] += 1
            countT[ord(s[i-m]) - ord('a')] -= 1
        
        
        if(compare(countP, countT)):
            return True
        return False