Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".

Solution - 
def compare(arr1, arr2):
    for i in range(256):
        if arr1[i] != arr2[i]:
            return False
    return True

class Solution:
    def findAnagrams(self, s: str, p: str) -> List[int]:
        
        m = len(p)
        n = len(s)
        
        if n<m:
            return []
        
        countP = [0]*256
        countT = [0]*256
        
        for i in range(m):
            countP[ord(p[i])] += 1
            countT[ord(s[i])] += 1
        ans = list()
        for i in range(m,n):
            if(compare(countP, countT)):
                ans.append(i-m)
            
            countT[ord(s[i])] += 1
            countT[ord(s[i-m])] -= 1
        
        
        if(compare(countP, countT)):
            ans.append(n-m)
        return ans